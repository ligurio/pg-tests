---
- hosts: all
  gather_facts: true
  tasks:

  - name: subscribe to RHSM
    redhat_subscription: state=present username=a.slaykovsky@postgrespro.ru password=password_LOL autosubscribe=yes
    become_method: su
    become: true
    when: ansible_distribution == "RedHat"

  - name: install required packages (YUM)
    yum: name={{ item }} state=present update_cache=yes
    with_items:
        - git
        - gcc
        - python-devel
        - libselinux-python
        - python-psycopg2
    when: ansible_pkg_mgr == "yum"
    become_method: su
    become: true

  # TODO: move this to Packer post-install script
  - name: add Astra Linux 1.4 remote repository
    apt_repository: repo="deb http://webdav.l.postgrespro.ru/DIST/pool/astra-1.4-smolensk-{{ item }} smolensk main non-free contrib" state=present
    with_items:
        - install
        - developer
    when: ansible_distribution == "\"astra linux se\"" and ansible_distribution_version == "1.4"
    become_method: su
    become: true

  # TODO: move this to Packer post-install script
  - name: add Astra Linux 1.5 remote repository
    apt_repository: repo="deb http://webdav.l.postgrespro.ru/DIST/pool/astra-1.5-smolensk-{{ item }} smolensk main non-free contrib" state=present
    with_items:
        - install
        - developer
    when: ansible_distribution == "\"astralinuxse\"" and ansible_distribution_version == "1.5"
    become_method: su
    become: true

  # TODO: move this to Packer post-install script
  - name: remove cdrom repository
    file: state=absent path={{ item }}
    with_items:
        - /etc/apt/sources.list_astra
        - /etc/apt/sources.list
    when: ansible_distribution == "\"astra linux se\"" or ansible_distribution == "\"astralinuxse\""
    become_method: su
    become: true

  - name: install required packages (APT)
    apt: name={{ item }} state=present update_cache=yes
    with_items:
        - git
        - gcc-4.7-base
#        - python-dev
        - python-selinux
        - python-psycopg2
#        - libpq-dev
    when: ansible_distribution == "\"astra linux se\"" or ansible_distribution == "\"astralinuxse\""
    become_method: su
    become: true

  - name: install python module with APT support (ALTLinux)
    command: apt-get install -y python-module-apt
    when: ansible_os_family == "Altlinux"
    become_method: su
    become: true
    tags:
    - skip_ansible_lint

  - name: Wait for automatic system updates
    shell: while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 2; done;
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    become_method: su
    become: true

# FIXME: [ubuntu1604]"/bin/sh: 1: /usr/bin/python: not found\r\n"
# FIXME: [ubuntu1510]"/bin/sh: 1: /usr/bin/python: not found\r\n"
  - name: install required packages (APT)
    apt: name={{ item }} state=present update_cache=yes
    with_items:
        - git
        - gcc
        - python-dev
        - python-selinux
        - python-psycopg2
        - libpq-dev
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    become_method: su
    become: true

# FIXME: Rosa Marathon 2012
  - name: install required packages (urpmi)
    urpmi: name={{ item }} state=present update_cache=yes
    with_items:
        - git
        - gcc
        - python-dev
        - python-selinux
    when: ansible_pkg_mgr == "urpmi"
    become_method: su
    become: true

# FIXME: SLES 11
  - name: install required packages (Zypper)
    zypper: name={{ item }} state=present update_cache=yes
    with_items:
        - git
        - gcc
        - python-dev
        - python-selinux
    when: ansible_pkg_mgr == "zypper"
    become_method: su
    become: true

  - name: set up ssh authorized_keys
    authorized_key: user=test key="{{ item }}" state=present exclusive=yes
    with_file:
    - authorized_keys

  - name: download pip
    get_url:
      url: https://bootstrap.pypa.io/get-pip.py
      dest: /tmp
      validate_certs: no

  - name: install pip
    command: "python /tmp/get-pip.py"
    become_method: su
    become: true
    tags:
    - skip_ansible_lint

  - name: delete get-pip.py
    file: state=absent path=/tmp/get-pip.py

  - name: install pytest framework and plugins
    pip: name={{ item.name }} version={{ item.version }}
    with_items:
      - { name: 'psutil', version: '5.0.1' }
      - { name: 'pytest', version: '3.0.3' }
      - { name: 'pytest-html', version: '1.11.0' }
      - { name: 'netaddr', version: '0.7.18' }
    become_method: su
    become: true

#   yum install -y python-psycopg2
#   apt-get install -y python-psycopg2
#  - name: install psycopg2
#    pip: name=psycopg2 version=2.6.2
#    environment:
#      PATH: "{{ ansible_env.PATH }}:/usr/pgsql-9.6/bin/"
#    become_method: su
#    become: true

  - name: remove postgresql-devel (YUM)
    yum: name={{ item }} state=absent
    with_items:
      - postgresql-devel
      - postgresql
    when: ansible_pkg_mgr == "yum"
    become_method: su
    become: true

  - name: remove libpq-dev (APT)
    apt: name=libpq-dev state=absent
    when: ansible_pkg_mgr == "apt" and ansible_distribution != "Altlinux"
    become_method: su
    become: true

  - name: set selinux to permissive
    selinux: policy=targeted state=permissive
    when: ansible_selinux == "Enabled"
    #when: (ansible_distribution == "Ubuntu" and ansible_distribution_major_version == "15") or
    #      (ansible_distribution == "Debian" and ansible_distribution_major_version == "7")
    become_method: su
    become: true

  - name: make sure we have a 'wheel' group
    group:
      name: wheel
      state: present
    become_method: su
    become: true

  - name: allow 'wheel' group to have passwordless become_method
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%wheel'
      line: '%wheel ALL=(ALL) NOPASSWD: ALL'
    become_method: su
    become: true

  # see https://bugzilla.redhat.com/show_bug.cgi?id=1020147
  - name: comment out requiretty option in /etc/sudoers
    lineinfile:
      dest: /etc/sudoers
      regexp: '^Defaults    requiretty'
      line: '#Defaults    requiretty'
      state: present
    when: ansible_os_family == "RedHat"
    become_method: su
    become: true

  - name: add user 'test' to the 'wheel' group
    user:
      name: "test"
      groups: wheel
      append: yes
    become_method: su
    become: true

  - name: coredump handling
    pam_limits: domain={{ item }} limit_type=soft limit_item=core value=unlimited backup=yes
    with_items:
      - test
      - postgres
    become_method: su
    become: true

  - name: make a directory for coredumps
    file: path="/home/test/coredumps" state=directory

  - name: remove unknown keys from sysctl.conf
    sysctl: name={{ item }} state=absent reload=no
    with_items:
        - net.bridge.bridge-nf-call-arptables
        - net.bridge.bridge-nf-call-iptables
        - net.bridge.bridge-nf-call-ip6tables
    become_method: su
    become: true
    when: ansible_os_family == "GosLinux"

  - name: change coredump filename pattern
    sysctl: name="kernel.core_pattern" value="/home/test/coredumps/core-%e-%p-%t" sysctl_set=yes state=present
    become_method: su
    become: true

  - name: unsubscribe from RHSM
    redhat_subscription: state=absent username=a.slaykovsky@postgrespro.ru password=password_LOL
    become_method: su
    become: true
    when: ansible_distribution == "RedHat"

  - name: set http.sslVerify to false in a git config
    git_config: name=http.sslVerify scope=global value="false"
    when: ansible_distribution == "\"astra linux se\"" or ansible_distribution == "\"astralinuxse\""

  - name: checkout latest version of tests
    git: repo=https://git.postgrespro.ru/automation/pg-tests.git dest=/home/test/pg-tests
    tags:
    - skip_ansible_lint

  #- name: psycopg2 test script
  #  command: /usr/bin/python -c "import psycopg2; conn = psycopg2.connect(\"host='localhost' dbname='postgres' user='postgres' password='password'\") "
