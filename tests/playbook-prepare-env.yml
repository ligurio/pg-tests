---
- hosts: all
  gather_facts: true
  vars:
   win_path: C:\Users\test\Downloads\

  tasks:

  - name: subscribe to RHSM
    redhat_subscription: state=present username=v.wagner@postgrespro.ru password=thuch5Zeik autosubscribe=true force_register=yes
    become_method: su
    become: true
    when: ansible_distribution == "RedHat"

  - name: Remove beta repository RHEL 7 (and clean up left-over metadata)
    yum_repository:
       name: rhel-7-server-rt-beta-rpms
       state: absent
    notify: yum-clean-metadata
    become_method: su
    become: true
    when: ansible_distribution == "RedHat" and ansible_distribution_major_version == "7"

  - name: Enable optional repo RHEL7
    command: subscription-manager repos --enable=rhel-7-server-optional-rpms
    become_method: su
    become: true
    when: ansible_distribution == "RedHat" and ansible_distribution_major_version == "7"

  - name: install required packages (YUM)
    yum: name={{ item }} state=present update_cache=yes
    with_items:
        - git
        - gcc
        - python-devel
        - libselinux-python
        - python-psycopg2
        - tkinter
    when: ansible_os_family != "Windows" and ansible_pkg_mgr == "yum"
    become_method: su
    become: true

  # TODO: move this to Packer post-install script
  - name: add Astra Linux 1.4 remote repository
    apt_repository: repo="deb http://dist.l.postgrespro.ru/DIST/pool/astra-1.4-smolensk-{{ item }} smolensk main non-free contrib" state=present
    with_items:
        - install
        - developer
    when: ansible_distribution == "\"astra linux se\"" and ansible_distribution_version == "1.4"
    become_method: su
    become: true

  # TODO: move this to Packer post-install script
  - name: add Astra Linux 1.5 remote repository
    apt_repository: repo="deb http://dist.l.postgrespro.ru/DIST/pool/astra-1.5-smolensk-{{ item }} smolensk main non-free contrib" state=present
    with_items:
        - install
        - developer
    when: ansible_distribution == "\"astralinuxse\"" and ansible_distribution_version == "1.5"
    become_method: su
    become: true

  # TODO: move this to Packer post-install script
  - name: remove cdrom repository
    file: state=absent path={{ item }}
    with_items:
        - /etc/apt/sources.list_astra
        - /etc/apt/sources.list
    when: ansible_distribution == "\"astra linux se\"" or ansible_distribution == "\"astralinuxse\""
    become_method: su
    become: true

  - name: install required packages (APT)
    apt: name={{ item }} state=present update_cache=yes
    with_items:
        - git
        - gcc-4.7-base
        - python-dev
        - python-selinux
        - python-psycopg2
        - python-tk
#        - libpq-dev
    when: ansible_distribution == "\"astra linux se\"" or ansible_distribution == "\"astralinuxse\""
    become_method: su
    become: true

  - name: Update repos ALT
    command: apt-get update
    when: ansible_distribution == 'ALT'
    become_method: su
    become: true
    tags:
    - skip_ansible_lint

  - name: install python module with APT support (ALTLinux)
    command: apt-get install -y {{ item }}
    with_items:
        - git --fix-missing
        - gcc4.5 --fix-missing
        - python-dev --fix-missing
        - python-module-setools --fix-missing
        - python-module-psycopg2 --fix-missing
        - libpq5.4-devel --fix-missing
        - python-modules-tkinter --fix-missing
    when: ansible_distribution == 'ALT' and ansible_distribution_major_version != '8'
    become_method: su
    become: true
    tags:
    - skip_ansible_lint

  - name: install python module with APT support (ALTLinux 8)
    command: apt-get install -y {{ item }}
    with_items:
        - git --fix-missing
        - gcc4.5 --fix-missing
        - python-dev --fix-missing
        - python-module-setools --fix-missing
        - python-module-psycopg2 --fix-missing
        - libpq5.9-devel --fix-missing
        - python-modules-tkinter --fix-missing
    when: ansible_distribution == 'ALT' and ansible_distribution_major_version == '8'
    become_method: su
    become: true
    tags:
    - skip_ansible_lint

  - name: Wait for automatic system updates
    shell: while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 2; done;
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    become_method: su
    become: true

  - name: install required packages (APT)
    apt: name={{ item }} state=present update_cache=yes
    with_items:
        - git
        - gcc
        - python-dev
        - python-selinux
        - python-psycopg2
        - libpq-dev
        - python-tk
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    become_method: su
    become: true

  - name: install required packages (urpmi)
    urpmi: name={{ item }} state=present update_cache=yes
    with_items:
        - git
        - gcc
        - python-selinux
        - lib64python-devel
        - tkinter
    when: ansible_os_family != "Windows" and ansible_pkg_mgr == "urpmi"
    become_method: su
    become: true

  - name: install required packages (Zypper)
    zypper: name={{ item }} state=present update_cache=yes force=yes
    with_items:
        - git
        - gcc
        - python-devel
        - python-selinux
    when: ansible_os_family != "Windows" and ansible_pkg_mgr == "zypper"
    become_method: su
    become: true

  - name: set up ssh authorized_keys
    authorized_key: user=test key="{{ item }}" state=present exclusive=yes
    when: ansible_os_family != "Windows"
    with_file:
    - ../static/authorized_keys

  - name: download pip
    get_url:
      url: https://bootstrap.pypa.io/get-pip.py
      dest: /tmp
      validate_certs: no
    when: ansible_os_family != "Windows"

  - name: install pip
    command: "python /tmp/get-pip.py"
    become_method: su
    become: true
    tags:
    - skip_ansible_lint
    when: ansible_os_family != "Windows"

  - name: delete get-pip.py
    file: state=absent path=/tmp/get-pip.py
    when: ansible_os_family != "Windows"

  - name: set http.sslVerify to false in a git config
    git_config: name=http.sslVerify scope=global value="false"
    when: ansible_distribution == "\"astra linux se\"" or ansible_distribution == "\"astralinuxse\"" or ansible_distribution == "\"AstraLinuxSE\""

  - name: checkout latest version of tests
    git: repo=https://git.postgrespro.ru/automation/pg-tests.git dest=/home/test/pg-tests
    tags:
    - skip_ansible_lint
    when: ansible_os_family != "Windows"

  - name: install required pip modules
    pip:
      requirements: "/home/test/pg-tests/tests/requirements.txt"
    become_method: su
    become: true
    when: ansible_os_family != "Windows"

  - name: remove postgresql-devel (YUM)
    yum: name={{ item }} state=absent
    with_items:
      - postgresql-devel
      - postgresql
    when: ansible_os_family != "Windows" and ansible_pkg_mgr == "yum"
    become_method: su
    become: true

  - name: remove libpq-dev (APT)
    apt: name=libpq-dev state=absent
    when: ansible_os_family != "Windows" and ansible_pkg_mgr == "apt" and ansible_distribution != "ALT"
    become_method: su
    become: true

  - name: set selinux to permissive
    selinux: policy=targeted state=permissive
    when: ansible_os_family != "Windows" and ansible_selinux == "Enabled"
    #when: (ansible_distribution == "Ubuntu" and ansible_distribution_major_version == "15") or
    #      (ansible_distribution == "Debian" and ansible_distribution_major_version == "7")
    become_method: su
    become: true

  - name: make sure we have a 'wheel' group
    group:
      name: wheel
      state: present
    become_method: su
    become: true
    when: ansible_os_family != "Windows"

  - name: allow 'wheel' group to have passwordless become_method
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%wheel'
      line: '%wheel ALL=(ALL) NOPASSWD: ALL'
    become_method: su
    become: true
    when: ansible_os_family != "Windows"

  # see https://bugzilla.redhat.com/show_bug.cgi?id=1020147
  - name: comment out requiretty option in /etc/sudoers
    lineinfile:
      dest: /etc/sudoers
      regexp: '^Defaults    requiretty'
      line: '#Defaults    requiretty'
      state: present
    when: ansible_os_family == "RedHat"
    become_method: su
    become: true

  - name: change secure path in sudoers
    lineinfile:
      dest: /etc/sudoers
      regexp: '^Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin'
      line: 'Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin'
      state: present
    when:
      - ansible_os_family != "Windows"
      - ansible_distribution != "ALT"
    become_method: su
    become: true

  - name: add user 'test' to the 'wheel' group
    user:
      name: "test"
      groups: wheel
      append: yes
    become_method: su
    become: true
    when: ansible_os_family != "Windows"

  - name: coredump handling
    pam_limits: domain={{ item }} limit_type=soft limit_item=core value=unlimited backup=yes
    with_items:
      - test
      - postgres
    become_method: su
    become: true
    when: ansible_os_family != "Windows"

  - name: make a directory for coredumps
    file: path="/home/test/coredumps" state=directory
    when: ansible_os_family != "Windows"

  - name: remove unknown keys from sysctl.conf
    sysctl: name={{ item }} state=absent reload=no
    with_items:
        - net.bridge.bridge-nf-call-arptables
        - net.bridge.bridge-nf-call-iptables
        - net.bridge.bridge-nf-call-ip6tables
    become_method: su
    become: true
    when: ansible_os_family == "GosLinux" or ansible_os_family == "ROSA"

  - name: change coredump filename pattern
    sysctl: name="kernel.core_pattern" value="/home/test/coredumps/core-%e-%p-%t" sysctl_set=yes state=present
    become_method: su
    become: true
    when:
      - ansible_os_family != "Windows"
      - ansible_os_family != "МСВСфера"

  - name: windows - download git
    when: ansible_os_family == "Windows"
    with_items:
        - { win_url: "https://github.com/git-for-windows/git/releases/download/v2.11.0.windows.3/Git-2.11.0.3-64-bit.exe", win_dest: 'Git-2.11.0.3-64-bit.exe' }
        - { win_url: "https://www.python.org/ftp/python/2.7.13/python-2.7.13.amd64.msi", win_dest: 'python2-7-13.amd64.msi' }
        - { win_url: "https://bootstrap.pypa.io/get-pip.py", win_dest: 'get-pip.py' }
    win_get_url:
      url: '{{ item.win_url }}'
      dest: '{{ win_path }}{{ item.win_dest }}'

  - name: windows - install git
    when: ansible_os_family == "Windows"
    win_shell: '{{ win_path }}Git-2.11.0.3-64-bit.exe /VERYSILENT'

  - name: windows - install python
    when: ansible_os_family == "Windows"
    win_msi:
      path: '{{ win_path }}python2-7-13.amd64.msi'
      wait: true

  - name: windows - install pip
    when: ansible_os_family == "Windows"
    win_shell: 'C:\Python27\python.exe {{ win_path }}get-pip.py'

  - name: windows - install pg-tests with git
    when: ansible_os_family == "Windows"
    win_shell: 'git clone https://git.postgrespro.ru/automation/pg-tests.git'

  - name: windows - install libraries
    when: ansible_os_family == "Windows"
    win_shell: 'C:\Python27\Scripts\pip.exe install -r C:\Users\test\pg-tests\tests\requirements.txt'

  - name: windows - install packages
    when: ansible_os_family == "Windows"
    win_shell: 'C:\Python27\Scripts\pip.exe install psycopg2'

  - name: windows - remove pip, git, python installers
    when: ansible_os_family == "Windows"
    with_items:
        - { win_dest: "Git-2.11.0.3-64-bit.exe" }
        - { win_dest: "python2-7-13.amd64.msi" }
        - { win_dest: "get-pip.py" }
    win_file:
      path: '{{ win_path }}{{ item.win_dest }}'
      state: absent
