---
- hosts: all
  gather_facts: no
  vars:
    payload_linux: resources/pg-tests.tgz
    payload_win: resources/pg-tests.zip

  tasks:

  - name: Wait for system to become reachable
    wait_for_connection: timeout=600

  - name: Gather facts
    setup:

  - name: Debug message
    debug:
      msg: "System {{ inventory_hostname }}/{{ ansible_host }} \
            ({{ ansible_connection }}) has os_family {{ ansible_os_family }}, \
            distribution {{ ansible_distribution }} {{ ansible_distribution_major_version }} \
            ({{ ansible_architecture }})."

  - name: Update repos and install acpid-events-power, gdb (ALT)
    shell: apt-get update &&
           apt-get install -y gdb acpid-events-power && /sbin/service acpid restart || exit 1;
           apt-get install -y glibc-core;
           sed s/#ZONE=/ZONE=/ -i /etc/sysconfig/clock; /sbin/service clock tzset;
           echo "Enable coredump on altlinux-spt-7 ( https://www.altlinux.org/Features/Core )";
           sed "s/^\(ulimit -Sc 0\)/# \1/" -i /etc/profile;
    args:
      warn: no
    when: ansible_distribution == 'ALT'
    become_method: su
    become: true
    tags:
    - skip_ansible_lint

  - name: Mount DVD(s) (if available)
    shell: if /sbin/blkid /dev/sr0; then
             mkdir /mnt/dvd &&
             echo "/dev/sr0       /mnt/dvd   auto    ro,user,exec,utf8        0    0" >> /etc/fstab &&
             mount /dev/sr0;
           fi;
           if /sbin/blkid /dev/sr1; then
             mkdir /mnt/dvd2 &&
             echo "/dev/sr1       /mnt/dvd2  auto    ro,user,exec,utf8        0    0" >> /etc/fstab &&
             mount /dev/sr1;
           fi;
    when: ansible_os_family != "Windows"
    become_method: su
    become: true

  - name: Setup DVDs as apt repositories (Astra Smolensk)
    shell: if [ -d /media/cdrom/dists ]; then
             rmdir /mnt/dvd;
             ln -s /media/cdrom /mnt/dvd;
           fi;
           if [ -d /mnt/dvd/dists ]; then
             echo "deb file:///mnt/dvd smolensk contrib main non-free" >> /etc/apt/sources.list.d/repo-dvd.list;
           fi;
           if [ -d /mnt/dvd2/dists ]; then
             echo "deb file:///mnt/dvd2 smolensk contrib main non-free" >> /etc/apt/sources.list.d/repo-dvd.list;
           fi;
           apt-get update;
    when: ansible_distribution == 'Astra Linux (Smolensk)'
    become_method: su
    become: true

  - name: Configure ACPI (Astra)
    shell: echo '/sbin/shutdown -h -P now "Power button pressed"' > /etc/acpi/powerbtn-acpi-support.sh
    when: ansible_distribution == 'Astra Linux (Smolensk)' or ansible_distribution == 'Astra Linux (Orel)'
    become_method: su
    become: true

  - name: Setup DVD as yum repository (RHEL) # Based on https://access.redhat.com/solutions/328863
    shell: if [ -f /mnt/dvd/media.repo ]; then
             cp /mnt/dvd/media.repo /etc/yum.repos.d/rhel-dvd.repo &&
             chmod 644 /etc/yum.repos.d/rhel-dvd.repo &&
             echo "enabled=1" >> /etc/yum.repos.d/rhel-dvd.repo &&
             if [ -d /mnt/dvd/repodata ]; then echo "baseurl=file:///mnt/dvd" >> /etc/yum.repos.d/rhel-dvd.repo; fi;
             if [ -d /mnt/dvd/Server/repodata ]; then echo "baseurl=file:///mnt/dvd/Server" >> /etc/yum.repos.d/rhel-dvd.repo; fi;
           fi
    when: ansible_distribution == "RedHat"
    become_method: su
    become: true

  - name: Setup DVD as yum repository (ROSA)
    shell: if [ -d /mnt/dvd/repodata ]; then
             printf "[InstallMedia]\nname=DVD\nmetadata_expire=-1\ngpgcheck=0\nenabled=1\nbaseurl=file:///mnt/dvd" > /etc/yum.repos.d/dvd.repo;
           fi
    when: ansible_distribution == "ROSA"
    become_method: su
    become: true

  - name: Downgrade packages to original 6.7 version and setup local repo (RHEL 6) # Needed for libselinux-python
    shell: yum downgrade -y glibc-2.12-1.166.el6 glibc-headers-2.12-1.166.el6 glibc-common-2.12-1.166.el6 glibc-devel-2.12-1.166.el6 &&
           yum downgrade -y libselinux-2.0.94-5.8.el6 libselinux-utils-2.0.94-5.8.el6 libselinux-devel-2.0.94-5.8.el6.x86_64 &&
           yum downgrade -y perl-4:5.10.1-141.el6.x86_64 perl-libs-5.10.1-141.el6.x86_64 perl-version-0.77-141.el6.x86_64 \
           perl-Module-Pluggable-3.90-141.el6.x86_64 perl-Compress-Zlib-2.021-141.el6.x86_64 \
           perl-IO-Compress-Base-2.021-141.el6.x86_64 perl-Pod-Escapes-1.04-141.el6.x86_64 \
           perl-IO-Compress-Zlib-2.021-141.el6.x86_64 perl-Compress-Raw-Zlib-2.021-141.el6.x86_64 \
           perl-Pod-Simple-3.13-141.el6.x86_64; \
           echo "Workaround for PGPRO-1259"; \
           yum install -y createrepo && \
           mkdir /opt/localrepo && cd /opt/localrepo && \
           wget http://ftp1.scientificlinux.org/linux/scientific/6.7/x86_64/os/Packages/libicu-devel-4.2.1-12.el6.x86_64.rpm && \
           createrepo . && cd ~ && \
           rpm --import http://ftp1.scientificlinux.org/linux/scientific/6x/x86_64/os/RPM-GPG-KEY-sl && \
           printf "[localrepo]\nbaseurl=file:///opt/localrepo\nenabled=1\n" > /etc/yum.repos.d/local.repo; \
           yum update
    args:
      warn: no
    when: ansible_distribution == "RedHat" and ansible_distribution_major_version == "6"
    become_method: su
    become: true

  - name: Disable automatic updates (Debian-based)
    shell: for aptconf in `grep -E '^\s*APT::Periodic::(Update-Package-Lists|Unattended-Upgrade)' -l -r /etc/apt/apt.conf.d/`;
             do sed -e 's#^\(\s*APT::Periodic::\(Update-Package-Lists\|Unattended-Upgrade\)\)#// \1#' -i $aptconf; done; \
           if which systemctl; then \
             systemctl mask apt-daily.timer; \
             systemctl mask apt-daily-upgrade.timer; \
             systemctl mask apt-daily.service; systemctl stop apt-daily.service; \
             systemctl mask apt-daily-upgrade.service; systemctl stop apt-daily-upgrade.service; \
           fi
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' or
          ansible_distribution.startswith('Astra Linux') or ansible_distribution.startswith('Astra-Linux')
    become_method: su
    become: true

  - name: Disable RedHat subscription (RedHat 7)
    shell: subscription-manager remove --all;
           subscription-manager unregister;
           subscription-manager clean
    when: ansible_distribution == "RedHat" and ansible_distribution_major_version == "7"
    become_method: su
    become: true

  - name: Fix repositories and prepare local repository; update tzdata (МСВСфера)
    shell: if [ -d /mnt/dvd/repodata ]; then
             ln -s /mnt/dvd /media/MSVSphere_6.3_Server &&
             sed s/enabled=0/enabled=1/ -i /etc/yum.repos.d/install.repo;
             sed s/enabled=1/enabled=0/ -i /etc/yum.repos.d/pgpro.repo;
           fi; \
           echo "Workaround for PGPRO-1259"; \
           mkdir /opt/localrepo && cd /opt/localrepo && \
           wget http://vault.centos.org/6.8/os/x86_64/Packages/libicu-4.2.1-14.el6.x86_64.rpm && \
           wget http://vault.centos.org/6.8/os/x86_64/Packages/libicu-devel-4.2.1-14.el6.x86_64.rpm && \
           createrepo . && cd ~ && \
           rpm --import http://vault.centos.org/6.8/os/x86_64/RPM-GPG-KEY-CentOS-6 && \
           printf "[localrepo]\nbaseurl=file:///opt/localrepo\nenabled=1\n" > /etc/yum.repos.d/local.repo; \
           yum update; \
           curl -O http://vault.centos.org/6.8/os/x86_64/Packages/tzdata-2016c-1.el6.noarch.rpm && \
           yum install -y tzdata-*.rpm
    when: ansible_distribution == "МСВСфера"
    become_method: su
    become: true

  - name: install required packages (YUM)
    yum: name={{ item }} state=present update_cache=yes
    with_items:
        - acpid
        - gcc
        - gdb
        - python-devel
    when: ansible_os_family != "Windows" and ansible_pkg_mgr == "yum"
    become_method: su
    become: true

  - name: install selinux required packages (YUM)
    yum: name={{ item }} state=present update_cache=yes
    with_items:
        - libselinux-python
    when: ansible_os_family != "Windows" and ansible_pkg_mgr == "yum" and
          ansible_selinux is defined and ansible_selinux != False
    become_method: su
    become: true

  - name: install required packages (APT)
    apt: name={{ item }} state=present update_cache=yes
    with_items:
        - acpid
        - gcc
        - gdb
        - python-dev
        - sudo
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' or
          ansible_distribution.startswith('Astra Linux') or ansible_distribution.startswith('Astra-Linux')
    become_method: su
    become: true

  - name: install required packages (APT)
    apt: name={{ item }} state=present update_cache=yes
    with_items:
        - qemu-guest-agent
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    become_method: su
    become: true

  - name: install coredump (APT)
    apt: name={{ item }} state=present update_cache=yes
    with_items:
        - systemd-coredump
    when: ansible_distribution == 'Debian' and ansible_distribution_major_version == '9'
    become_method: su
    become: true

  - name: install required packages (ALT 8)
    shell: apt-get install -y gcc5
    args:
      warn: no
    when: ansible_distribution == "ALT" and ansible_distribution_major_version == "8"
    become_method: su
    become: true
    tags:
    - skip_ansible_lint

  - name: install required packages (urpmi)
    urpmi: name={{ item }} state=present update_cache=yes
    with_items:
        - gcc
        - lib64python-devel
    when: ansible_os_family != "Windows" and ansible_pkg_mgr == "urpmi"
    become_method: su
    become: true

  - name: add extra repository (SUSE)
    shell: if [ -f /mnt/dvd/content ]; then
              zypper addrepo -t yast2 /mnt/dvd/ disk1;
           elif [ -d /mnt/dvd/media.1 ]; then
              zypper addrepo /mnt/dvd/ disk1;
           fi;
           if [ -f /mnt/dvd2/content ]; then
              zypper addrepo -t yast2 file:///mnt/dvd2/./ disk2;
           fi
    when: ansible_os_family == 'Suse'
    become_method: su
    become: true

  - name: install required packages (Zypper)
    zypper: name={{ item }} state=present update_cache=yes force=yes
    with_items:
        - gcc
        - gdb
        - python-devel
    when: ansible_os_family != "Windows" and ansible_pkg_mgr == "zypper"
    become_method: su
    become: true

  - name: set up ssh authorized_keys
    authorized_key: user=test key="{{ item }}" state=present exclusive=yes
    when: ansible_os_family != "Windows"
    with_file:
    - ../static/authorized_keys

  - name: set http.sslVerify to false in a git config
    git_config: name=http.sslVerify scope=global value="false"
    when: ansible_distribution == "\"astra linux se\"" or ansible_distribution == "\"astralinuxse\"" or ansible_distribution == "\"AstraLinuxSE\""

  - name: disable haldaemon (МСВСфера)
    service:
      name: haldaemon
      state: stopped
      enabled: no
    when: ansible_os_family == "МСВСфера"
    become_method: su
    become: true

  - name: start acpid
    service:
      name: acpid
      state: started
      enabled: yes
    become_method: su
    become: true
    when: ansible_os_family != "Windows" and ansible_os_family != 'Suse'

  - name: copy tests payload
    copy:
      src:  "{{ payload_linux }}"
      dest: /home/test/
    when: ansible_os_family != "Windows"

  - name: extract tests
    unarchive:
      src: /home/test/pg-tests.tgz
      dest: /home/test
      remote_src: yes
    when: ansible_os_family != "Windows"

  - name: set permissions to /home/test/pg-tests
    file:
      path: '{{ item.path }}'
      mode: '{{ item.mode }}'
    with_items:
      - { path: '/home/test/pg-tests', mode: '0777' }
      - { path: '/home/test', mode: '0771' }
    when: ansible_os_family != "Windows"
    become_method: su

  - name: update python-six on Ubuntu 14.04
    shell: wget http://archive.ubuntu.com/ubuntu/pool/main/s/six/python-six_1.10.0-3_all.deb &&
        dpkg -i python-six_1.10.0-3_all.deb
    args:
      warn: no
    when: ansible_distribution == 'Ubuntu' and ansible_distribution_major_version == "14"
    become_method: su
    become: true

  - name: install pip
    command: "python /home/test/pg-tests/get-pip.py"
    retries: 5
    delay: 10
    register: result
    until: result.rc == 0
    become_method: su
    become: true
    tags:
    - skip_ansible_lint
    when: ansible_os_family != "Windows" and
          not ((ansible_distribution == "ALT" or ansible_distribution == "GosLinux" or
                ansible_distribution == "ROSA" or ansible_os_family == "RedHat") and
                ansible_distribution_major_version == "6") and
          not (ansible_distribution == "SLES" and ansible_distribution_major_version == "11")

  - name: install required pip modules
    pip:
      requirements: "/home/test/pg-tests/tests_install/requirements.txt"
      extra_args:  --no-index --find-links file:///home/test/pg-tests/pip-packages
    become_method: su
    become: true
    when: ansible_os_family != "Windows"

  - name: make sure we have a 'wheel' group
    group:
      name: wheel
      state: present
    become_method: su
    become: true
    when: ansible_os_family != "Windows"

  - name: allow 'wheel' group to have passwordless become_method
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%wheel'
      line: '%wheel ALL=(ALL) NOPASSWD: ALL'
    become_method: su
    become: true
    when: ansible_os_family != "Windows"

  # see https://bugzilla.redhat.com/show_bug.cgi?id=1020147
  - name: comment out requiretty option in /etc/sudoers
    lineinfile:
      dest: /etc/sudoers
      regexp: '^Defaults    requiretty'
      line: '#Defaults    requiretty'
      state: present
    when: ansible_os_family == "RedHat" or ansible_os_family == "МСВСфера"
    become_method: su
    become: true

  - name: change secure path in sudoers
    lineinfile:
      dest: /etc/sudoers
      regexp: '^Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin'
      line: 'Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin:/opt/python2.7/bin'
      state: present
    when:
      - ansible_os_family != "Windows"
      - ansible_distribution != "ALT"
    become_method: su
    become: true

  - name: add user 'test' to the 'wheel' group
    user:
      name: "test"
      groups: wheel
      append: yes
    become_method: su
    become: true
    when: ansible_os_family != "Windows"

  - name: coredump handling
    pam_limits: domain={{ item }} limit_type=soft limit_item=core value=unlimited backup=yes
    with_items:
      - test
      - postgres
      - root
    become_method: su
    become: true
    when: ansible_os_family != "Windows"

  - name: make a directory for coredumps
    file: path="/var/coredumps" state=directory mode=0777
    become_method: su
    become: true
    when: ansible_os_family != "Windows"

  - name: remove unknown keys from sysctl.conf
    sysctl: name={{ item }} state=absent reload=no
    with_items:
        - net.bridge.bridge-nf-call-arptables
        - net.bridge.bridge-nf-call-iptables
        - net.bridge.bridge-nf-call-ip6tables
    become_method: su
    become: true
    when: ansible_os_family == "GosLinux" or ansible_os_family == "ROSA"

  - name: Disable apport service (Ubuntu)
    lineinfile:
      dest: /etc/default/apport
      regexp: '^enabled='
      line: 'enabled=0'
      state: present
    when: ansible_distribution == 'Ubuntu'
    become_method: su
    become: true

  - name: change coredump filename pattern
    sysctl: name="kernel.core_pattern" value="/var/coredumps/core-%e-%p-%t-EXE:%E" sysctl_set=yes state=present
    become_method: su
    become: true
    when:
      - ansible_os_family != "Windows"
      - ansible_os_family != "МСВСфера"
      - not (ansible_distribution == 'Debian' and ansible_distribution_major_version|int > 8)
      - not (ansible_os_family == 'RedHat' and ansible_distribution_major_version|int > 6)

  - name: change coredump filename pattern (RedHat 7)
    sysctl: name="kernel.core_pattern" value="| /usr/lib/systemd/systemd-coredump %p %u %g %s %t %c %e" sysctl_set=yes state=present
    become_method: su
    become: true
    when: ((ansible_os_family == 'RedHat' or ansible_os_family == 'AlterOS') and ansible_distribution_major_version == '7')

  - name: enable coredump in systemd-based OS
    shell: if [ -f /etc/systemd/system.conf ]; then
               sed "s/^#DefaultLimitCORE=$/DefaultLimitCORE=infinity/" -i /etc/systemd/system.conf;
               systemctl daemon-reexec;
           fi
    become_method: su
    become: true
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' or
          ansible_distribution.startswith('Astra Linux') or ansible_distribution.startswith('Astra-Linux') or
          ansible_distribution == 'ROSA'

  - name: windows - install Visual C++ Compiler for Python
    when: ansible_os_family == "Windows"
    win_package:
      path: http://webdav.l.postgrespro.ru/DIST/windows/resources/VCForPython27.msi
      # https://download.microsoft.com/download/7/9/6/796EF2E4-801B-4FC4-AB28-B59FBF6D907B/VCForPython27.msi fails sporadically
      product_id: '{692514A8-5484-45FC-B0AE-BE2DF7A75891}'
      state: present

  - name: windows - install Python 2.7 (32 bit)
    when: ansible_os_family == "Windows" and
          (ansible_architecture == "32-bit" or ansible_architecture == "32-разрядная")
    win_package:
      path: http://webdav.l.postgrespro.ru/DIST/windows/resources/python-2.7.13.msi
      product_id: '{4A656C6C-D24A-473F-9747-3A8D00907A03}'
      state: present

  - name: windows - install Python 2.7 (64 bit)
    when: ansible_os_family == "Windows" and
          (ansible_architecture == "64-bit" or ansible_architecture == "64-разрядная")
    win_package:
      path: http://webdav.l.postgrespro.ru/DIST/windows/resources/python-2.7.13.amd64.msi
      product_id: '{4A656C6C-D24A-473F-9747-3A8D00907A04}'
      state: present

  - name: windows - setup Python PATH
    win_path:
        elements:
        - 'C:\Python27'
        - 'C:\Python27\Scripts'
    when: ansible_os_family == "Windows"

  - name: windows - setup Python home
    win_environment:
        state: present
        name: PYTHONHOME
        value: C:\Python27
        level: machine
    when: ansible_os_family == "Windows"

  - name: windows - copy tests payload
    win_copy:
      src:  "{{ payload_win }}"
      dest: C:\Users\test\
    when: ansible_os_family == "Windows"

  - name: windows - extract tests payload
    win_unzip:
      src: C:\Users\test\pg-tests.zip
      dest: C:\Users\test
      creates: C:\Users\test\pg_tests
    when: ansible_os_family == "Windows"

  - name: windows - install python requirements
    when: ansible_os_family == "Windows"
    win_shell: 'pip install -r C:\Users\test\pg-tests\tests_install\requirements.txt'

  - name: windows - stop w32time service
    when: ansible_os_family == "Windows"
    win_service:
      name: w32time
      start_mode: disabled
      state: stopped

  - name: windows - stop Windows Update service
    when: ansible_os_family == "Windows"
    win_service:
      name: wuauserv
      start_mode: disabled
      state: stopped

  - name: windows - enable usermode crashdumps collection
    when: ansible_os_family == "Windows"
    win_regedit:
      path: 'HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps'
      name: "{{ item.name }}"
      data: "{{ item.data }}"
      type: "{{ item.type }}"
    with_items:
      - { name: DumpFolder, data: 'C:\CrashDumps', type: String }
      - { name: DumpCount, data: 10, type: DWord }
      - { name: DumpType, data: 2, type: DWord }

  # Non-interactive alternative for adding 'Remote Management Users' via 'winrm configSDDL default'
  - name: windows - allow winrm connections for Remote Management Users
    when: ansible_os_family == "Windows"
    win_regedit:
      path: HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WSMAN\Service
      name: rootSDDL
      data: "O:NSG:BAD:P(A;;GA;;;BA)(A;;GR;;;IU)(A;;GAGR;;;RM)S:P(AU;FA;GA;;;WD)(AU;SA;GXGW;;;WD)"
      type: string

  - name: windows - restart WinRM service
    when: ansible_os_family == "Windows"
    win_command: 'powershell -Command "Register-ScheduledTask -TaskName Restart-WinRM -User System -Action (New-ScheduledTaskAction -Execute \"Powershell.exe\" -Argument \"-Command Restart-Service -Name WinRM\"); Start-ScheduledTask -TaskName Restart-WinRM"'

  - name: Wait for system to become reachable (2)
    when: ansible_os_family == "Windows"
    wait_for_connection: delay=10 timeout=600
